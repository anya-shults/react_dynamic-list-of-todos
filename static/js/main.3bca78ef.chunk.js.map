{"version":3,"sources":["types/SortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","TodoList","React","memo","todos","setLoading","currentTodo","setCurrentTodo","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","value","setValue","setSortType","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","normalizedInput","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","loading","setTodo","useState","user","setUser","useEffect","userId","finally","classNames","href","email","name","App","inputValue","setInputValue","setTodos","sortType","getPreparedTodos","useCallback","currentTodos","sortedTodos","filter","Error","normalizedValue","toLowerCase","trim","includes","preparedTodos","useMemo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bca78ef.chunk.js","sourcesContent":["export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  currentTodo: Todo | null\n  setCurrentTodo: React.Dispatch<React.SetStateAction<Todo | null>>,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setLoading,\n  currentTodo,\n  setCurrentTodo,\n}) => {\n  const handleClick = (clickedTodo: Todo) => {\n    setCurrentTodo(clickedTodo);\n    setLoading(true);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': todo.id === currentTodo?.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {!!todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn('far', {\n                      'fa-eye': todo.id !== currentTodo?.id,\n                      'fa-eye-slash': todo.id === currentTodo?.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  value: string,\n  setValue: React.Dispatch<React.SetStateAction<string>>,\n  setSortType: React.Dispatch<React.SetStateAction<SortType>>,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  value,\n  setValue,\n  setSortType,\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const normalizedInput = event.target.value;\n\n    setValue(normalizedInput);\n  };\n\n  const handleDeleteClick = () => setValue('');\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSortType(event.target.value as SortType);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleSelectChange}>\n            <option value={SortType.ALL}>All</option>\n            <option value={SortType.ACTIVE}>Active</option>\n            <option value={SortType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={value}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!value.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleDeleteClick}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  loading: boolean,\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>\n  todo: Todo | null,\n  setTodo: React.Dispatch<React.SetStateAction<Todo | null>>,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  loading,\n  setLoading,\n  todo,\n  setTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const handleCLick = () => {\n    setTodo(null);\n  };\n\n  useEffect(() => {\n    getUser(todo?.userId as number)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCLick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-danger': !todo?.completed,\n                  'has-text-success': todo?.completed,\n                })}\n              >\n                {todo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/SortType';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n  const [sortType, setSortType] = useState(SortType.ALL);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const getPreparedTodos = useCallback((\n    currentTodos: Todo[],\n  ) => {\n    let sortedTodos: Todo[] = [];\n\n    switch (sortType) {\n      case SortType.ALL:\n        sortedTodos = [...currentTodos];\n        break;\n\n      case SortType.ACTIVE:\n        sortedTodos = currentTodos.filter(todo => !todo.completed);\n        break;\n\n      case SortType.COMPLETED:\n        sortedTodos = currentTodos.filter(todo => todo.completed);\n        break;\n\n      default:\n        throw new Error('Wrong sort type');\n    }\n\n    const normalizedValue = inputValue.toLowerCase().trim();\n\n    return sortedTodos.filter(todo => todo.title.toLowerCase().includes(normalizedValue));\n  }, [inputValue, sortType]);\n\n  const preparedTodos = useMemo(() => getPreparedTodos(todos), [todos, inputValue, sortType]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={inputValue}\n                setValue={setInputValue}\n                setSortType={setSortType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {(loading && !preparedTodos.length && <Loader />)\n                || (\n                  <TodoList\n                    todos={preparedTodos}\n                    setLoading={setLoading}\n                    currentTodo={currentTodo}\n                    setCurrentTodo={setCurrentTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!currentTodo && (\n        <TodoModal\n          loading={loading}\n          setLoading={setLoading}\n          todo={currentTodo}\n          setTodo={setCurrentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}