{"version":3,"sources":["api.ts","types/SortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","TodoList","React","memo","todos","setShowModal","setLoading","setUser","setCurrentTodo","showModal","handleClick","clickedTodo","userId","finally","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","value","setValue","setSortType","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","normalizedInput","toLowerCase","length","style","pointerEvents","Loader","TodoModal","loading","user","classNames","href","email","name","App","useState","inputValue","setInputValue","setTodos","currentTodo","sortType","useEffect","preparedTodos","useCallback","currentTodos","sortedTodos","filter","Error","includes","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb72f25c.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todos: Todo[],\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>,\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>,\n  setUser: React.Dispatch<React.SetStateAction<User | null>>,\n  setCurrentTodo: React.Dispatch<React.SetStateAction<Todo | null>>,\n  showModal: boolean,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setShowModal,\n  setLoading,\n  setUser,\n  setCurrentTodo,\n  showModal,\n}) => {\n  const handleClick = (clickedTodo: Todo) => {\n    setCurrentTodo(clickedTodo);\n    setShowModal(true);\n    setLoading(true);\n    getUser(clickedTodo.userId)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': showModal,\n              '': !showModal,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {!!todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn('far', {\n                      'fa-eye': !showModal,\n                      'fa-eye-slash': showModal,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n        {/* <tr data-cy=\"todo\" className=\"\">\n          <td className=\"is-vcentered\">1</td>\n          <td className=\"is-vcentered\" />\n          <td className=\"is-vcentered is-expanded\">\n            <p className=\"has-text-danger\">delectus aut autem</p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n              <span className=\"icon\">\n                <i className=\"far fa-eye\" />\n              </span>\n            </button>\n          </td>\n        </tr>\n        <tr data-cy=\"todo\" className=\"has-background-info-light\">\n          <td className=\"is-vcentered\">2</td>\n          <td className=\"is-vcentered\" />\n          <td className=\"is-vcentered is-expanded\">\n            <p className=\"has-text-danger\">quis ut nam facilis et officia qu</p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n              <span className=\"icon\">\n                <i className=\"far fa-eye-slash\" />\n              </span>\n            </button>\n          </td>\n        </tr>\n\n        <tr data-cy=\"todo\" className=\"\">\n          <td className=\"is-vcentered\">1</td>\n          <td className=\"is-vcentered\" />\n          <td className=\"is-vcentered is-expanded\">\n            <p className=\"has-text-danger\">delectus aut autem</p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n              <span className=\"icon\">\n                <i className=\"far fa-eye\" />\n              </span>\n            </button>\n          </td>\n        </tr>\n\n        <tr data-cy=\"todo\" className=\"\">\n          <td className=\"is-vcentered\">6</td>\n          <td className=\"is-vcentered\" />\n          <td className=\"is-vcentered is-expanded\">\n            <p className=\"has-text-danger\">\n              qui ullam ratione quibusdam voluptatem quia omnis\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n              <span className=\"icon\">\n                <i className=\"far fa-eye\" />\n              </span>\n            </button>\n          </td>\n        </tr>\n\n        <tr data-cy=\"todo\" className=\"\">\n          <td className=\"is-vcentered\">8</td>\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className=\"has-text-success\">quo adipisci enim quam ut ab</p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n              <span className=\"icon\">\n                <i className=\"far fa-eye\" />\n              </span>\n            </button>\n          </td>\n        </tr> */}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  value: string,\n  setValue: React.Dispatch<React.SetStateAction<string>>,\n  setSortType: React.Dispatch<React.SetStateAction<SortType>>,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  value,\n  setValue,\n  setSortType,\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const normalizedInput = event.target.value.toLowerCase();\n\n    setValue(normalizedInput);\n  };\n\n  const handleDeleteClick = () => setValue('');\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSortType(event.target.value as SortType);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleSelectChange}>\n            <option value={SortType.ALL}>All</option>\n            <option value={SortType.ACTIVE}>Active</option>\n            <option value={SortType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={value}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!value.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleDeleteClick}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>,\n  loading: boolean,\n  user: User | null,\n  todo: Todo | null,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  setShowModal,\n  loading,\n  user,\n  todo,\n}) => {\n  const handleCLick = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCLick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong\n                className={classNames({\n                  'has-text-danger': !todo?.completed,\n                  'has-text-success': todo?.completed,\n                })}\n              >\n                {todo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/SortType';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [sortType, setSortType] = useState(SortType.ALL);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const getPreparedTodos = useCallback((\n    currentTodos: Todo[],\n  ) => {\n    let sortedTodos: Todo[] = [];\n\n    switch (sortType) {\n      case SortType.ALL:\n        sortedTodos = [...currentTodos];\n        break;\n\n      case SortType.ACTIVE:\n        sortedTodos = currentTodos.filter(todo => !todo.completed);\n        break;\n\n      case SortType.COMPLETED:\n        sortedTodos = currentTodos.filter(todo => todo.completed);\n        break;\n\n      default:\n        throw new Error('Wrong sort type');\n    }\n\n    return sortedTodos.filter(todo => todo.title.toLowerCase().includes(inputValue));\n  }, [inputValue, sortType]);\n\n  const preparedTodos = getPreparedTodos(todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={inputValue}\n                setValue={setInputValue}\n                setSortType={setSortType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {(loading && !preparedTodos.length && <Loader />)\n                || (\n                  <TodoList\n                    todos={preparedTodos}\n                    setShowModal={setShowModal}\n                    setLoading={setLoading}\n                    setUser={setUser}\n                    setCurrentTodo={setCurrentTodo}\n                    showModal={showModal}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {showModal && (\n        <TodoModal\n          setShowModal={setShowModal}\n          loading={loading}\n          user={user}\n          todo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}